openapi: "3.1.0"
info:
  title: "backend API"
  description: "backend API"
  version: "1.0.0"
servers:
  - url: "https://kma.matthiasklenz.de"
    description: "remote"
  - url: "http://localhost:8080"
    description: "local"
paths:
  /api/version:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /status:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Up!"
  /ws:
    get:
      description: ""
      parameters:
        - name: "Connection"
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: "string"
        - name: "Upgrade"
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: "string"
        - name: "Sec-WebSocket-Key"
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api/user:
    delete:
      description: ""
      responses:
        "202":
          description: "Accepted"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserInfo"
  /api/register/basic:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterData"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /api/login/basic:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicAuthRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/login/oauth:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/login/refresh:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/event/{source}/dataPoints/{topic}/limit/{limit}:
    get:
      description: ""
      parameters:
        - name: "source"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "topic"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "limit"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GenericMessageEvent"
  /api/model/{id}/download:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
  /api/model/upload/{filepath}:
    post:
      description: ""
      parameters:
        - name: "filepath"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /api/model/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/model/{id}/setting:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ModelSettings"
    put:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelSettings"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/models:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AvailableFiles"
components:
  schemas:
    RestErrorInfo:
      type: "object"
      properties:
        name:
          type: "string"
        message:
          type: "string"
        code:
          type: "integer"
          format: "int32"
      required:
        - "name"
        - "message"
        - "code"
    UserInfo:
      type: "object"
      properties:
        username:
          type: "string"
        loginType:
          type: "string"
          enum:
            - "OAUTH"
            - "BASIC"
      required:
        - "username"
        - "loginType"
    RegisterData:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
        - "username"
        - "password"
    BasicAuthRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
        - "username"
        - "password"
    Instant:
      type: "object"
      properties: { }
    AuthResponse:
      type: "object"
      properties:
        token:
          type: "string"
        refreshToken:
          type: "string"
        expiresIn:
          nullable: true
          $ref: "#/components/schemas/Instant"
      required:
        - "token"
        - "refreshToken"
    GenericMessageEvent:
      type: "object"
      properties: { }
    ModelSettings:
      type: "object"
      properties:
        lightIntensity:
          type: "number"
          format: "double"
        scale:
          type: "number"
          format: "double"
      required:
        - "lightIntensity"
        - "scale"
    ModelInfo:
      type: "object"
      properties:
        modelId:
          type: "integer"
          format: "int32"
        filename:
          type: "string"
        model:
          type: "string"
      required:
        - "modelId"
        - "filename"
        - "model"
    AvailableFiles:
      type: "object"
      properties:
        files:
          type: "array"
          items:
            $ref: "#/components/schemas/ModelInfo"
          uniqueItems: true
      required:
        - "files"