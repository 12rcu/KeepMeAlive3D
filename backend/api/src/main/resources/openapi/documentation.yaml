openapi: "3.1.0"
info:
  title: "backend API"
  description: "backend API"
  version: "1.0.0"
servers:
  - url: "https://kma.matthiasklenz.de"
    description: "remote"
  - url: "localhost:8080"
    description: "local"
paths:
  /status:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Up!"
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api/user:
    delete:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserInfo"
  /api/register/basic:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "register.pw.invalid"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /api/login/basic:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicAuthRequest"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Wrong username or password!"
                Example#2:
                  value: "Wrong username or password!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/login/oauth:
    post:
      description: ""
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Could not Authenticate!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/login/refresh:
    post:
      description: ""
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Could not Authenticate!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/model/download:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelInfo"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "userid could not be found!"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "File not found!"
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
  /api/models:
    get:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "userid could not be found!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AvailableFiles"
  /api/model/upload/{filepath}:
    post:
      description: ""
      parameters:
      - name: "filepath"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "userid could not be found!"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "File created!"
  /api/model/delete:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelInfo"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "userid could not be found!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "File deleted successfully!"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "File could not be deleted!"
  /api/event/{source}/dataPoints/{topic}/limit/{limit}:
    get:
      description: ""
      parameters:
      - name: "source"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "topic"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "limit"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "userid could not be found!"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "limit could not be found!"
                Example#2:
                  value: "topic could not be found!"
                Example#3:
                  value: "source could not be found!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/GenericEventMessage"
components:
  schemas:
    UserInfo:
      type: "object"
      properties:
        username:
          type: "string"
        loginType:
          type: "string"
          enum:
          - "OAUTH"
          - "BASIC"
      required:
      - "username"
      - "loginType"
    RegisterData:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
      - "username"
      - "password"
    BasicAuthRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
      - "username"
      - "password"
    Instant:
      type: "object"
      properties: {}
    AuthResponse:
      type: "object"
      properties:
        token:
          type: "string"
        refreshToken:
          type: "string"
        expiresIn:
          $ref: "#/components/schemas/Instant"
      required:
      - "token"
      - "refreshToken"
    ModelInfo:
      type: "object"
      properties:
        filename:
          type: "string"
        model:
          type: "string"
      required:
      - "filename"
      - "model"
    AvailableFiles:
      type: "object"
      properties:
        files:
          type: "array"
          items:
            $ref: "#/components/schemas/ModelInfo"
      required:
      - "files"
    GenericEventMessage:
      type: "object"
      properties: {}